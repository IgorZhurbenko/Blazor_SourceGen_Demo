// Autogenerated. Will be overwritten on build. Remove this comment to cancel overwriting.

using Communication.Models.Entities.ReferrableEntities.Documents.OutcomingOrder;
using System.Linq;
using Communication.Common;
using Google.Protobuf.Collections;
using System.Collections.Generic;
using System.Collections;
using Communication.ProtoModels.Conversion;
namespace Communication.ProtoModels
{
    public sealed partial class OutcomingOrderModelList : IList<Communication.Models.Entities.ReferrableEntities.Documents.OutcomingOrder.IOutcomingOrderModel>
    {
        internal ListWrapper<OutcomingOrderModel, RepeatedField<OutcomingOrderModel>, IOutcomingOrderModel> Wrapper { get; private set; }
        public OutcomingOrderModelList(RepeatedField<OutcomingOrderModel> itemsParameter)
        {
            this.message_ = itemsParameter;
            OnConstruction();
        }
        partial void OnConstruction()
        {
            Wrapper = new ListWrapper<OutcomingOrderModel, RepeatedField<OutcomingOrderModel>, IOutcomingOrderModel>(Message, i => i.ToProto());
        }
        IOutcomingOrderModel IList<IOutcomingOrderModel>.this[int index] { get => Wrapper[index]; set => Wrapper[index] = value; }
        int IList<IOutcomingOrderModel>.IndexOf(IOutcomingOrderModel item) => Wrapper.IndexOf(item);
        void IList<IOutcomingOrderModel>.Insert(int index, IOutcomingOrderModel item) => Wrapper.Insert(index, item);
        void IList<IOutcomingOrderModel>.RemoveAt(int index) => Wrapper.RemoveAt(index);
        int ICollection<IOutcomingOrderModel>.Count => Wrapper.Count;
        bool ICollection<IOutcomingOrderModel>.IsReadOnly => Wrapper.IsReadOnly;
        void ICollection<IOutcomingOrderModel>.Add(IOutcomingOrderModel item) => Wrapper.Add(item);
        void ICollection<IOutcomingOrderModel>.Clear() => Wrapper.Clear();
        bool ICollection<IOutcomingOrderModel>.Contains(IOutcomingOrderModel item) => Wrapper.Contains(item);
        void ICollection<IOutcomingOrderModel>.CopyTo(IOutcomingOrderModel[] array, int arrayIndex) => Wrapper.CopyTo(array, arrayIndex);
        IEnumerator<IOutcomingOrderModel> IEnumerable<IOutcomingOrderModel>.GetEnumerator() => Wrapper.GetEnumerator();
        IEnumerator IEnumerable.GetEnumerator() => Wrapper.GetEnumerator();
        bool ICollection<IOutcomingOrderModel>.Remove(IOutcomingOrderModel item) => Wrapper.Remove(item);
        public static implicit operator OutcomingOrderModelList(RepeatedField<OutcomingOrderModel> from)
        {
            var result = new OutcomingOrderModelList(from);
            return result;
        }
        public static implicit operator RepeatedField<OutcomingOrderModel>(OutcomingOrderModelList from)
        {
            return from.Message;
        }
    }
    public sealed partial class OutcomingOrderModel : IOutcomingOrderModel
    {
        IOutcomingOrderReference IOutcomingOrderModel.Reference => Reference;
        private IList<Communication.Models.Entities.ReferrableEntities.Documents.IncomingOrder.IIncomingOrderReference> OrdersIncomingListWrapper;
        partial void OnConstruction()
        {
            OrdersIncomingListWrapper = new ListWrapper<IncomingOrderReference, RepeatedField<IncomingOrderReference>, Communication.Models.Entities.ReferrableEntities.Documents.IncomingOrder.IIncomingOrderReference>(OrdersIncoming, ri => ri.ToProto());
        }
        IList<Communication.Models.Entities.ReferrableEntities.Documents.IncomingOrder.IIncomingOrderReference> IOutcomingOrderModel.OrdersIncoming => OrdersIncomingListWrapper;
    }
}