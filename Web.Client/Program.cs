using Grpc.Net.Client;
using Grpc.Net.Client.Web;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.WebAssembly.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using System;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using Communication;
using Communication.Models;
using Web.Client.Services.ServerCommunication;
using MudBlazor;
using MudBlazor.Services;
using Web.Client.Services.UI;
using Microsoft.JSInterop;

namespace Web.Client
{
    public class Program
    {
        const string HerokuServerPath = "https://igorzhurbenkosapp.herokuapp.com";
        const string LocalServerPath = "http://localhost:5000";

        public static async Task Main(string[] args)
        {
            var builder = WebAssemblyHostBuilder.CreateDefault(args);
            builder.RootComponents.Add<Web.Client.App>("#app");

            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });

            builder.Services.AddSingleton(services =>
            {
                string backendUrl = HerokuServerPath;
                var httpHandler = new GrpcWebHandler(GrpcWebMode.GrpcWebText, new HttpClientHandler());
                var channel = GrpcChannel.ForAddress(backendUrl, new GrpcChannelOptions { HttpHandler = httpHandler });
                Account.UseNavigationManager(services.GetRequiredService<NavigationManager>());
                ClientStorage.UseJSRuntime(services.GetRequiredService<IJSRuntime>());
                return channel;
            }).AddAutogeneratedCommunicationServices();

            builder.Services.AddOidcAuthentication(options =>
            {
                // Configure your authentication provider options here.
                // For more information, see https://aka.ms/blazor-standalone-auth
                builder.Configuration.Bind("Local", options.ProviderOptions);
            });

            builder.Services.AddScoped<GlobalClicksCatcher>();

            builder.Services.AddMudServices(config =>
            {
                config.SnackbarConfiguration.PreventDuplicates = false;
                config.SnackbarConfiguration.SnackbarVariant = Variant.Text;
                config.SnackbarConfiguration.PositionClass = Defaults.Classes.Position.TopCenter;
                config.SnackbarConfiguration.MaxDisplayedSnackbars = 100;
            });

            await builder.Build().RunAsync();
        }
    }
}