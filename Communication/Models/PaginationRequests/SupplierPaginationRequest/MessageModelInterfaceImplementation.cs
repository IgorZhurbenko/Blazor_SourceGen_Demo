// Autogenerated. Will be overwritten on build. Remove this comment to cancel overwriting.

using Communication.Models.PaginationRequests.SupplierPaginationRequest;
using System.Linq;
using Communication.Common;
using Google.Protobuf.Collections;
using System.Collections.Generic;
using System.Collections;
using Communication.ProtoModels.Conversion;
namespace Communication.ProtoModels
{
    public sealed partial class SupplierPaginationRequestModelList : IList<Communication.Models.PaginationRequests.SupplierPaginationRequest.ISupplierPaginationRequestModel>
    {
        internal ListWrapper<SupplierPaginationRequestModel, RepeatedField<SupplierPaginationRequestModel>, ISupplierPaginationRequestModel> Wrapper { get; private set; }
        public SupplierPaginationRequestModelList(RepeatedField<SupplierPaginationRequestModel> itemsParameter)
        {
            this.message_ = itemsParameter;
            OnConstruction();
        }
        partial void OnConstruction()
        {
            Wrapper = new ListWrapper<SupplierPaginationRequestModel, RepeatedField<SupplierPaginationRequestModel>, ISupplierPaginationRequestModel>(Message, i => i.ToProto());
        }
        ISupplierPaginationRequestModel IList<ISupplierPaginationRequestModel>.this[int index] { get => Wrapper[index]; set => Wrapper[index] = value; }
        int IList<ISupplierPaginationRequestModel>.IndexOf(ISupplierPaginationRequestModel item) => Wrapper.IndexOf(item);
        void IList<ISupplierPaginationRequestModel>.Insert(int index, ISupplierPaginationRequestModel item) => Wrapper.Insert(index, item);
        void IList<ISupplierPaginationRequestModel>.RemoveAt(int index) => Wrapper.RemoveAt(index);
        int ICollection<ISupplierPaginationRequestModel>.Count => Wrapper.Count;
        bool ICollection<ISupplierPaginationRequestModel>.IsReadOnly => Wrapper.IsReadOnly;
        void ICollection<ISupplierPaginationRequestModel>.Add(ISupplierPaginationRequestModel item) => Wrapper.Add(item);
        void ICollection<ISupplierPaginationRequestModel>.Clear() => Wrapper.Clear();
        bool ICollection<ISupplierPaginationRequestModel>.Contains(ISupplierPaginationRequestModel item) => Wrapper.Contains(item);
        void ICollection<ISupplierPaginationRequestModel>.CopyTo(ISupplierPaginationRequestModel[] array, int arrayIndex) => Wrapper.CopyTo(array, arrayIndex);
        IEnumerator<ISupplierPaginationRequestModel> IEnumerable<ISupplierPaginationRequestModel>.GetEnumerator() => Wrapper.GetEnumerator();
        IEnumerator IEnumerable.GetEnumerator() => Wrapper.GetEnumerator();
        bool ICollection<ISupplierPaginationRequestModel>.Remove(ISupplierPaginationRequestModel item) => Wrapper.Remove(item);
        public static implicit operator SupplierPaginationRequestModelList(RepeatedField<SupplierPaginationRequestModel> from)
        {
            var result = new SupplierPaginationRequestModelList(from);
            return result;
        }
        public static implicit operator RepeatedField<SupplierPaginationRequestModel>(SupplierPaginationRequestModelList from)
        {
            return from.Message;
        }
    }
    public sealed partial class SupplierPaginationRequestModel : ISupplierPaginationRequestModel
    {
        Communication.Models.Filters.SupplierModelFilter.ISupplierModelFilterModel ISupplierPaginationRequestModel.Filter
        {
            set
            {
                Filter = value.ToProto();
            }
            get
            {
                return Filter;
            }
        }
    }
}