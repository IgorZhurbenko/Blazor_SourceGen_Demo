// Autogenerated. Will be overwritten on build. Remove this comment to cancel overwriting.

using System;
using System.Linq;
using Common.Extensions.Object;
namespace Communication.Models.Filters.IncomingOrderLineModelFilter
{
    public interface IIncomingOrderLineModelFilterModel : Communication.Models.IModelBase, IEquatable<IIncomingOrderLineModelFilterModel>
    {
        public System.Boolean Exclusive { get; }
        public System.UInt32 Limit { get; }
        public Communication.Models.Filters.NumberFilter.INumberFilterModel Quantity { get; set; }
        public Communication.Models.Filters.NumberFilter.INumberFilterModel Price { get; set; }
        public Communication.Models.Filters.ReferenceFilter.IReferenceFilterModel IncomingOrder { get; set; }
        public Communication.Models.Filters.ReferenceFilter.IReferenceFilterModel Good { get; set; }
        bool IEquatable<IIncomingOrderLineModelFilterModel>.Equals(IIncomingOrderLineModelFilterModel other)
        {
            var result = Exclusive.CompareConsideringNulls(other.Exclusive) && Limit.CompareConsideringNulls(other.Limit) && Quantity.CompareConsideringNulls(other.Quantity) && Price.CompareConsideringNulls(other.Price) && IncomingOrder.CompareConsideringNulls(other.IncomingOrder) && Good.CompareConsideringNulls(other.Good);
            return result;
        }
    }
}