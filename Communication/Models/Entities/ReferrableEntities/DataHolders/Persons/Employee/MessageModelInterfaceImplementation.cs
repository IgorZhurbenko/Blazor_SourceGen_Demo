// Autogenerated. Will be overwritten on build. Remove this comment to cancel overwriting.

using Communication.Models.Entities.ReferrableEntities.DataHolders.Persons.Employee;
using System.Linq;
using Communication.Common;
using Google.Protobuf.Collections;
using System.Collections.Generic;
using System.Collections;
using Communication.ProtoModels.Conversion;
namespace Communication.ProtoModels
{
    public sealed partial class EmployeeModelList : IList<Communication.Models.Entities.ReferrableEntities.DataHolders.Persons.Employee.IEmployeeModel>
    {
        internal ListWrapper<EmployeeModel, RepeatedField<EmployeeModel>, IEmployeeModel> Wrapper { get; private set; }
        public EmployeeModelList(RepeatedField<EmployeeModel> itemsParameter)
        {
            this.message_ = itemsParameter;
            OnConstruction();
        }
        partial void OnConstruction()
        {
            Wrapper = new ListWrapper<EmployeeModel, RepeatedField<EmployeeModel>, IEmployeeModel>(Message, i => i.ToProto());
        }
        IEmployeeModel IList<IEmployeeModel>.this[int index] { get => Wrapper[index]; set => Wrapper[index] = value; }
        int IList<IEmployeeModel>.IndexOf(IEmployeeModel item) => Wrapper.IndexOf(item);
        void IList<IEmployeeModel>.Insert(int index, IEmployeeModel item) => Wrapper.Insert(index, item);
        void IList<IEmployeeModel>.RemoveAt(int index) => Wrapper.RemoveAt(index);
        int ICollection<IEmployeeModel>.Count => Wrapper.Count;
        bool ICollection<IEmployeeModel>.IsReadOnly => Wrapper.IsReadOnly;
        void ICollection<IEmployeeModel>.Add(IEmployeeModel item) => Wrapper.Add(item);
        void ICollection<IEmployeeModel>.Clear() => Wrapper.Clear();
        bool ICollection<IEmployeeModel>.Contains(IEmployeeModel item) => Wrapper.Contains(item);
        void ICollection<IEmployeeModel>.CopyTo(IEmployeeModel[] array, int arrayIndex) => Wrapper.CopyTo(array, arrayIndex);
        IEnumerator<IEmployeeModel> IEnumerable<IEmployeeModel>.GetEnumerator() => Wrapper.GetEnumerator();
        IEnumerator IEnumerable.GetEnumerator() => Wrapper.GetEnumerator();
        bool ICollection<IEmployeeModel>.Remove(IEmployeeModel item) => Wrapper.Remove(item);
        public static implicit operator EmployeeModelList(RepeatedField<EmployeeModel> from)
        {
            var result = new EmployeeModelList(from);
            return result;
        }
        public static implicit operator RepeatedField<EmployeeModel>(EmployeeModelList from)
        {
            return from.Message;
        }
    }
    public sealed partial class EmployeeModel : IEmployeeModel
    {
        IEmployeeReference IEmployeeModel.Reference => Reference;
        Communication.Models.Entities.ReferrableEntities.DataHolders.Persons.Employee.IEmployeeReference IEmployeeModel.Mentor
        {
            set
            {
                Mentor = new EmployeeReference{ID = value.ID, Representation = value.Representation, };
            }
            get
            {
                return Mentor;
            }
        }
        private IList<Communication.Models.Entities.ReferrableEntities.DataHolders.Good.IGoodReference> ResponsibleForGoodsListWrapper;
        partial void OnConstruction()
        {
            ResponsibleForGoodsListWrapper = new ListWrapper<GoodReference, RepeatedField<GoodReference>, Communication.Models.Entities.ReferrableEntities.DataHolders.Good.IGoodReference>(ResponsibleForGoods, ri => ri.ToProto());
        }
        IList<Communication.Models.Entities.ReferrableEntities.DataHolders.Good.IGoodReference> IEmployeeModel.ResponsibleForGoods => ResponsibleForGoodsListWrapper;
    }
}