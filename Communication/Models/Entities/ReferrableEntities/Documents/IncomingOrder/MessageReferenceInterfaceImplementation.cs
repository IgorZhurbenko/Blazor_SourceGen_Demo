// Autogenerated. Will be overwritten on build. Remove this comment to cancel overwriting.

using System.Linq;
using Communication.Common;
using Google.Protobuf.Collections;
using System.Collections.Generic;
using Communication.ProtoModels.Conversion;
using System.Collections;
using Communication.Models.Entities.ReferrableEntities.Documents.IncomingOrder;
namespace Communication.ProtoModels
{
    public sealed partial class IncomingOrderReference : Communication.Models.Entities.ReferrableEntities.Documents.IncomingOrder.IIncomingOrderReference
    {
        public static implicit operator IncomingOrderReferenceMessage(IncomingOrderReference message)
        {
            return new()
            {Message = message};
        }
        public static implicit operator IncomingOrderReference(IncomingOrderReferenceMessage message)
        {
            return message.Message;
        }
    }
    public sealed partial class IncomingOrderReferenceList : IList<Communication.Models.Entities.ReferrableEntities.Documents.IncomingOrder.IIncomingOrderReference>
    {
        internal ListWrapper<IncomingOrderReference, RepeatedField<IncomingOrderReference>, IIncomingOrderReference> Wrapper { get; private set; }
        public IncomingOrderReferenceList(RepeatedField<IncomingOrderReference> itemsParameter)
        {
            message_ = itemsParameter;
            OnConstruction();
        }
        partial void OnConstruction()
        {
            Wrapper = new ListWrapper<IncomingOrderReference, RepeatedField<IncomingOrderReference>, IIncomingOrderReference>(Message, i => i.ToProto());
        }
        Communication.Models.Entities.ReferrableEntities.Documents.IncomingOrder.IIncomingOrderReference IList<Communication.Models.Entities.ReferrableEntities.Documents.IncomingOrder.IIncomingOrderReference>.this[int index] { get => Wrapper[index]; set => Wrapper[index] = value; }
        int IList<Communication.Models.Entities.ReferrableEntities.Documents.IncomingOrder.IIncomingOrderReference>.IndexOf(Communication.Models.Entities.ReferrableEntities.Documents.IncomingOrder.IIncomingOrderReference item) => Wrapper.IndexOf(item);
        void IList<Communication.Models.Entities.ReferrableEntities.Documents.IncomingOrder.IIncomingOrderReference>.Insert(int index, Communication.Models.Entities.ReferrableEntities.Documents.IncomingOrder.IIncomingOrderReference item) => Wrapper.Insert(index, item);
        void IList<Communication.Models.Entities.ReferrableEntities.Documents.IncomingOrder.IIncomingOrderReference>.RemoveAt(int index) => Wrapper.RemoveAt(index);
        int ICollection<Communication.Models.Entities.ReferrableEntities.Documents.IncomingOrder.IIncomingOrderReference>.Count => Wrapper.Count;
        bool ICollection<Communication.Models.Entities.ReferrableEntities.Documents.IncomingOrder.IIncomingOrderReference>.IsReadOnly => Wrapper.IsReadOnly;
        void ICollection<Communication.Models.Entities.ReferrableEntities.Documents.IncomingOrder.IIncomingOrderReference>.Add(Communication.Models.Entities.ReferrableEntities.Documents.IncomingOrder.IIncomingOrderReference item) => Wrapper.Add(item);
        void ICollection<Communication.Models.Entities.ReferrableEntities.Documents.IncomingOrder.IIncomingOrderReference>.Clear() => Wrapper.Clear();
        bool ICollection<Communication.Models.Entities.ReferrableEntities.Documents.IncomingOrder.IIncomingOrderReference>.Contains(Communication.Models.Entities.ReferrableEntities.Documents.IncomingOrder.IIncomingOrderReference item) => Wrapper.Contains(item);
        void ICollection<Communication.Models.Entities.ReferrableEntities.Documents.IncomingOrder.IIncomingOrderReference>.CopyTo(Communication.Models.Entities.ReferrableEntities.Documents.IncomingOrder.IIncomingOrderReference[] array, int arrayIndex) => Wrapper.CopyTo(array, arrayIndex);
        IEnumerator<Communication.Models.Entities.ReferrableEntities.Documents.IncomingOrder.IIncomingOrderReference> IEnumerable<Communication.Models.Entities.ReferrableEntities.Documents.IncomingOrder.IIncomingOrderReference>.GetEnumerator() => Wrapper.GetEnumerator();
        IEnumerator IEnumerable.GetEnumerator() => Wrapper.GetEnumerator();
        bool ICollection<Communication.Models.Entities.ReferrableEntities.Documents.IncomingOrder.IIncomingOrderReference>.Remove(Communication.Models.Entities.ReferrableEntities.Documents.IncomingOrder.IIncomingOrderReference item) => Wrapper.Remove(item);
    }
}