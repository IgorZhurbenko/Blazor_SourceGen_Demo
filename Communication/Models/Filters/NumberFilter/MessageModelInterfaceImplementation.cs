// Autogenerated. Will be overwritten on build. Remove this comment to cancel overwriting.

using Communication.Models.Filters.NumberFilter;
using System.Linq;
using Communication.Common;
using Google.Protobuf.Collections;
using System.Collections.Generic;
using System.Collections;
using Communication.ProtoModels.Conversion;
namespace Communication.ProtoModels
{
    public sealed partial class NumberFilterModelList : IList<Communication.Models.Filters.NumberFilter.INumberFilterModel>
    {
        internal ListWrapper<NumberFilterModel, RepeatedField<NumberFilterModel>, INumberFilterModel> Wrapper { get; private set; }
        public NumberFilterModelList(RepeatedField<NumberFilterModel> itemsParameter)
        {
            this.message_ = itemsParameter;
            OnConstruction();
        }
        partial void OnConstruction()
        {
            Wrapper = new ListWrapper<NumberFilterModel, RepeatedField<NumberFilterModel>, INumberFilterModel>(Message, i => i.ToProto());
        }
        INumberFilterModel IList<INumberFilterModel>.this[int index] { get => Wrapper[index]; set => Wrapper[index] = value; }
        int IList<INumberFilterModel>.IndexOf(INumberFilterModel item) => Wrapper.IndexOf(item);
        void IList<INumberFilterModel>.Insert(int index, INumberFilterModel item) => Wrapper.Insert(index, item);
        void IList<INumberFilterModel>.RemoveAt(int index) => Wrapper.RemoveAt(index);
        int ICollection<INumberFilterModel>.Count => Wrapper.Count;
        bool ICollection<INumberFilterModel>.IsReadOnly => Wrapper.IsReadOnly;
        void ICollection<INumberFilterModel>.Add(INumberFilterModel item) => Wrapper.Add(item);
        void ICollection<INumberFilterModel>.Clear() => Wrapper.Clear();
        bool ICollection<INumberFilterModel>.Contains(INumberFilterModel item) => Wrapper.Contains(item);
        void ICollection<INumberFilterModel>.CopyTo(INumberFilterModel[] array, int arrayIndex) => Wrapper.CopyTo(array, arrayIndex);
        IEnumerator<INumberFilterModel> IEnumerable<INumberFilterModel>.GetEnumerator() => Wrapper.GetEnumerator();
        IEnumerator IEnumerable.GetEnumerator() => Wrapper.GetEnumerator();
        bool ICollection<INumberFilterModel>.Remove(INumberFilterModel item) => Wrapper.Remove(item);
        public static implicit operator NumberFilterModelList(RepeatedField<NumberFilterModel> from)
        {
            var result = new NumberFilterModelList(from);
            return result;
        }
        public static implicit operator RepeatedField<NumberFilterModel>(NumberFilterModelList from)
        {
            return from.Message;
        }
    }
    public sealed partial class NumberFilterModel : INumberFilterModel
    {
    }
}