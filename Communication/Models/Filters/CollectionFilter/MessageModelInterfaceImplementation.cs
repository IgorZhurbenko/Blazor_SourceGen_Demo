// Autogenerated. Will be overwritten on build. Remove this comment to cancel overwriting.

using Communication.Models.Filters.CollectionFilter;
using System.Linq;
using Communication.Common;
using Google.Protobuf.Collections;
using System.Collections.Generic;
using System.Collections;
using Communication.ProtoModels.Conversion;
namespace Communication.ProtoModels
{
    public sealed partial class CollectionFilterModelList : IList<Communication.Models.Filters.CollectionFilter.ICollectionFilterModel>
    {
        internal ListWrapper<CollectionFilterModel, RepeatedField<CollectionFilterModel>, ICollectionFilterModel> Wrapper { get; private set; }
        public CollectionFilterModelList(RepeatedField<CollectionFilterModel> itemsParameter)
        {
            this.message_ = itemsParameter;
            OnConstruction();
        }
        partial void OnConstruction()
        {
            Wrapper = new ListWrapper<CollectionFilterModel, RepeatedField<CollectionFilterModel>, ICollectionFilterModel>(Message, i => i.ToProto());
        }
        ICollectionFilterModel IList<ICollectionFilterModel>.this[int index] { get => Wrapper[index]; set => Wrapper[index] = value; }
        int IList<ICollectionFilterModel>.IndexOf(ICollectionFilterModel item) => Wrapper.IndexOf(item);
        void IList<ICollectionFilterModel>.Insert(int index, ICollectionFilterModel item) => Wrapper.Insert(index, item);
        void IList<ICollectionFilterModel>.RemoveAt(int index) => Wrapper.RemoveAt(index);
        int ICollection<ICollectionFilterModel>.Count => Wrapper.Count;
        bool ICollection<ICollectionFilterModel>.IsReadOnly => Wrapper.IsReadOnly;
        void ICollection<ICollectionFilterModel>.Add(ICollectionFilterModel item) => Wrapper.Add(item);
        void ICollection<ICollectionFilterModel>.Clear() => Wrapper.Clear();
        bool ICollection<ICollectionFilterModel>.Contains(ICollectionFilterModel item) => Wrapper.Contains(item);
        void ICollection<ICollectionFilterModel>.CopyTo(ICollectionFilterModel[] array, int arrayIndex) => Wrapper.CopyTo(array, arrayIndex);
        IEnumerator<ICollectionFilterModel> IEnumerable<ICollectionFilterModel>.GetEnumerator() => Wrapper.GetEnumerator();
        IEnumerator IEnumerable.GetEnumerator() => Wrapper.GetEnumerator();
        bool ICollection<ICollectionFilterModel>.Remove(ICollectionFilterModel item) => Wrapper.Remove(item);
        public static implicit operator CollectionFilterModelList(RepeatedField<CollectionFilterModel> from)
        {
            var result = new CollectionFilterModelList(from);
            return result;
        }
        public static implicit operator RepeatedField<CollectionFilterModel>(CollectionFilterModelList from)
        {
            return from.Message;
        }
    }
    public sealed partial class CollectionFilterModel : ICollectionFilterModel
    {
        Communication.Models.Filters.NumberFilter.INumberFilterModel ICollectionFilterModel.Count
        {
            set
            {
                Count = value.ToProto();
            }
            get
            {
                return Count;
            }
        }
    }
}