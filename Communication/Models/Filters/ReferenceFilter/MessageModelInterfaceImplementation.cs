// Autogenerated. Will be overwritten on build. Remove this comment to cancel overwriting.

using Communication.Models.Filters.ReferenceFilter;
using System.Linq;
using Communication.Common;
using Google.Protobuf.Collections;
using System.Collections.Generic;
using System.Collections;
using Communication.ProtoModels.Conversion;
namespace Communication.ProtoModels
{
    public sealed partial class ReferenceFilterModelList : IList<Communication.Models.Filters.ReferenceFilter.IReferenceFilterModel>
    {
        internal ListWrapper<ReferenceFilterModel, RepeatedField<ReferenceFilterModel>, IReferenceFilterModel> Wrapper { get; private set; }
        public ReferenceFilterModelList(RepeatedField<ReferenceFilterModel> itemsParameter)
        {
            this.message_ = itemsParameter;
            OnConstruction();
        }
        partial void OnConstruction()
        {
            Wrapper = new ListWrapper<ReferenceFilterModel, RepeatedField<ReferenceFilterModel>, IReferenceFilterModel>(Message, i => i.ToProto());
        }
        IReferenceFilterModel IList<IReferenceFilterModel>.this[int index] { get => Wrapper[index]; set => Wrapper[index] = value; }
        int IList<IReferenceFilterModel>.IndexOf(IReferenceFilterModel item) => Wrapper.IndexOf(item);
        void IList<IReferenceFilterModel>.Insert(int index, IReferenceFilterModel item) => Wrapper.Insert(index, item);
        void IList<IReferenceFilterModel>.RemoveAt(int index) => Wrapper.RemoveAt(index);
        int ICollection<IReferenceFilterModel>.Count => Wrapper.Count;
        bool ICollection<IReferenceFilterModel>.IsReadOnly => Wrapper.IsReadOnly;
        void ICollection<IReferenceFilterModel>.Add(IReferenceFilterModel item) => Wrapper.Add(item);
        void ICollection<IReferenceFilterModel>.Clear() => Wrapper.Clear();
        bool ICollection<IReferenceFilterModel>.Contains(IReferenceFilterModel item) => Wrapper.Contains(item);
        void ICollection<IReferenceFilterModel>.CopyTo(IReferenceFilterModel[] array, int arrayIndex) => Wrapper.CopyTo(array, arrayIndex);
        IEnumerator<IReferenceFilterModel> IEnumerable<IReferenceFilterModel>.GetEnumerator() => Wrapper.GetEnumerator();
        IEnumerator IEnumerable.GetEnumerator() => Wrapper.GetEnumerator();
        bool ICollection<IReferenceFilterModel>.Remove(IReferenceFilterModel item) => Wrapper.Remove(item);
        public static implicit operator ReferenceFilterModelList(RepeatedField<ReferenceFilterModel> from)
        {
            var result = new ReferenceFilterModelList(from);
            return result;
        }
        public static implicit operator RepeatedField<ReferenceFilterModel>(ReferenceFilterModelList from)
        {
            return from.Message;
        }
    }
    public sealed partial class ReferenceFilterModel : IReferenceFilterModel
    {
        IList<uint> IReferenceFilterModel.In => In;
        IList<uint> IReferenceFilterModel.NotIn => NotIn;
        Communication.Models.Filters.StringFilter.IStringFilterModel IReferenceFilterModel.Representation
        {
            set
            {
                Representation = value.ToProto();
            }
            get
            {
                return Representation;
            }
        }
    }
}