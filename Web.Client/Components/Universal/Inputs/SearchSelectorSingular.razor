@typeparam TItem;
@inherits SearchSelectorBase<TItem>;

@using Common.Extensions.Object;

@inject GlobalClicksCatcher globalClickCatcher;
@*<input @oninput="async e => await OnFilterChange(e.Value.ToString())" @bind-value="_filterString" />*@

<StringInput InputLabel="@InputLabel" OnValueSet="async s => await OnFilterChange(s)" Value="@_filterString">
    @if (_showList)
    {
        string listClass = $"referrables-list " + (!string.IsNullOrEmpty(InputLabel) ? "with-label" : "");
        <ul class="@listClass" @onmouseover="() => _pointerHovers = true" @onmouseout="() => _pointerHovers = false">
            @foreach (var item in _currentBatch)
            {
                string selected = ItemsComparison(SelectedItem, item) ? "selected" : "";
                <li @onclick="e => { _toggleList(false); _onItemSelect(item); }" class="@selected">
                    @GetItemRepresentation(item)
                </li>
            }
        </ul>
    }
</StringInput>

@code{
    private bool _pointerHovers = false;

    protected override void _onItemSelect(TItem item)
    {
        SelectedItem = item;
        _filterString = GetItemRepresentation(item);
        if (OnItemSelect != null)
        {
            OnItemSelect(item);
        }
        StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (SelectedItem != null)
        {
            _filterString = GetItemRepresentation(SelectedItem);
        }
    }

    protected override void ConfigureClickHandlers()
    {
        base.ConfigureClickHandlers();
        OnGlobalMouseClick = new((o, m) =>
        {
            if (!_pointerHovers)
            {
                _toggleList(false);
                StateHasChanged();
            }
        });
        OnKeyClick = new((o, m) =>
        {
            if (_currentBatch.Any())
            {
                if (m.Key == "ArrowDown")
                {

                    int selectedIndex = SelectedItem != null ? _currentBatch.IndexOf(SelectedItem) : (-1);
                    if (selectedIndex < _currentBatch.Count - 1)
                    {
                        Console.WriteLine(selectedIndex);
                        _onItemSelect(_currentBatch[selectedIndex + 1]);
                    }
                    else
                    {
                        _onItemSelect(_currentBatch.First());
                    }

                }
                else if (m.Key == "ArrowUp")
                {
                    int selectedIndex = SelectedItem != null ? _currentBatch.IndexOf(SelectedItem) : (_currentBatch.Count - 1);
                    if (selectedIndex > 0)
                    {
                        _onItemSelect(_currentBatch[selectedIndex - 1]);
                    }
                    else
                    {
                        _onItemSelect(_currentBatch[_currentBatch.Count - 1]);
                    }
                }
                else if (m.Key == "Enter")
                {
                    //Console.WriteLine($"{ItemEmpty(SelectedItem)} - {GetItemRepresentation(SelectedItem)}");
                    if (_currentBatch.Any())
                    {
                        _onItemSelect(SelectedItem);
                    }
                    _toggleList(false);
                    StateHasChanged();
                }
            }
        });
    }
}