// Autogenerated. Will be overwritten on build. Remove this comment to cancel overwriting.

using System;
using System.Collections.Generic;
using System.Linq;
namespace Communication.Common
{
    public class CollectionWrapper<TItem, TCollection, TInterface> : ICollection<TInterface> where TItem : class, TInterface where TCollection : IList<TItem>
    {
        public readonly TCollection List;
        private readonly Func<TInterface, TItem> _convert;
        public CollectionWrapper(TCollection collection, Func<TInterface, TItem> convert)
        {
            List = collection;
            _convert = convert;
        }
        public int Count => List.Count;
        public bool IsReadOnly => List.IsReadOnly;
        int ICollection<TInterface>.Count => List.Count;
        bool ICollection<TInterface>.IsReadOnly => List.IsReadOnly;
        void ICollection<TInterface>.Add(TInterface item)
        {
            if (item is TItem titem)
            {
            }
            else
            {
                titem = _convert(item);
            }
            if (titem == null)
            {
                throw new System.ArgumentException("Null can't be added to collection.");
            }
            List.Add(titem);
        }
        public void Clear()
        {
            List.Clear();
        }
        public bool Contains(TInterface item)
        {
            return List.Any(i => i.Equals(item));
        }
        public void CopyTo(TInterface[] array, int arrayIndex)
        {
            foreach (var item in List)
            {
                array[arrayIndex] = item;
                arrayIndex++;
            }
        }
        public IEnumerator<TInterface> GetEnumerator()
        {
            return new ItemsEnumerator(List);
        }
        bool ICollection<TInterface>.Remove(TInterface item)
        {
            var conv = item as TItem;
            if (conv != null)
            {
                return List.Remove(conv);
            }
            else
            {
                return false;
            }
        }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }
        private class ItemsEnumerator : IEnumerator<TInterface>
        {
            private readonly TCollection _collection;
            private readonly IEnumerator<TItem> _enumerator;
            public ItemsEnumerator(TCollection collection)
            {
                _collection = collection;
                _enumerator = _collection.GetEnumerator();
            }
            public TInterface Current => _enumerator.Current;
            object System.Collections.IEnumerator.Current => Current;
            public void Dispose()
            {
                _enumerator.Dispose();
            }
            public bool MoveNext()
            {
                return _enumerator.MoveNext();
            }
            public void Reset()
            {
                _enumerator.Reset();
            }
        }
    }
}