@using Communication.Models.Filters.DateTimeFilter;
@using Universal.Inputs;

@inherits LeftRightLimitPropertyFilter<DateTime, DateTimeFilterModel>

<Web.Client.Components.Universal.Inputs.DateTimeInput OnValueSet="v => { Value.Left = v; OnLimitChanged(); }" InputLabel="fromLabel" InvalidityCondition="s => invalidityConditionForInputs(LimitErrored.Left)" Value="Value.Left">
    <Web.Client.Components.Universal.Inputs.Flag disabled="@(LimitErrored.Left)" Value="Filters.Left" OnValueSet="v=>{ Filters.Left = v; OnFilterChange(ValueWithFlag, GetResult()); }" />
</Web.Client.Components.Universal.Inputs.DateTimeInput>

<Web.Client.Components.Universal.Inputs.DateTimeInput OnValueSet="v => {Value.Right = v; OnLimitChanged(); }" InvalidityCondition="s => invalidityConditionForInputs(LimitErrored.Right)" InputLabel="toLabel" Value="Value.Right">
    <Web.Client.Components.Universal.Inputs.Flag disabled="@(LimitErrored.Right)" Value="Filters.Right" OnValueSet="v=>{ Filters.Right = v; OnFilterChange(ValueWithFlag, GetResult()); }" />
</Web.Client.Components.Universal.Inputs.DateTimeInput>

@code {
    protected override DateTimeFilterModel GetResult()
    {
        if (!Filters.Left && !Filters.Right || LimitErrored.Left || LimitErrored.Right)
        {
            return null;
        }
        DateTimeFilterModel result = new DateTimeFilterModel()
            {
                LeftLimit = Filters.Left ? Value.Left : DateTime.MinValue,
                RightLimit = Filters.Right ? Value.Right : DateTime.MaxValue,
            };
        return result;
    }

    void OnLimitChanged()
    {
        if (Value.Left == default(DateTime))
        {
            Filters.Left = false;
            LimitErrored.Left = false;
            Value.Left = DateTime.MinValue;
        }
        else
        {
            Filters.Left = true;
            LimitErrored.Left = false;
        }

        if (Value.Right == default(DateTime))
        {
            Filters.Right = false;
            LimitErrored.Right = false;
            Value.Right = DateTime.MinValue;
        }
        else
        {
            Filters.Right = true;
            LimitErrored.Right = false;
        }

        checkLeftLessThanRight(Value.Left, Value.Right);

        OnFilterChange(ValueWithFlag, GetResult());

    }

    void checkLeftLessThanRight(DateTime left, DateTime right)
    {
        if (right < left)
        {
            LimitErrored.Right = true;
            Filters.Right = false;
        }
        StateHasChanged();
    }

    string invalidityConditionForInputs(bool error) => error ? "Invalid input." : "";

    string fromLabel => $"{InputLabel}: from";
    string toLabel => $"{InputLabel}: to";

}