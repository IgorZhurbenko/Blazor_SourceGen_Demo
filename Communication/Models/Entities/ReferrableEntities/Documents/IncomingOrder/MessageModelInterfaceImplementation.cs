// Autogenerated. Will be overwritten on build. Remove this comment to cancel overwriting.

using Communication.Models.Entities.ReferrableEntities.Documents.IncomingOrder;
using System.Linq;
using Communication.Common;
using Google.Protobuf.Collections;
using System.Collections.Generic;
using System.Collections;
using Communication.ProtoModels.Conversion;
namespace Communication.ProtoModels
{
    public sealed partial class IncomingOrderModelList : IList<Communication.Models.Entities.ReferrableEntities.Documents.IncomingOrder.IIncomingOrderModel>
    {
        internal ListWrapper<IncomingOrderModel, RepeatedField<IncomingOrderModel>, IIncomingOrderModel> Wrapper { get; private set; }
        public IncomingOrderModelList(RepeatedField<IncomingOrderModel> itemsParameter)
        {
            this.message_ = itemsParameter;
            OnConstruction();
        }
        partial void OnConstruction()
        {
            Wrapper = new ListWrapper<IncomingOrderModel, RepeatedField<IncomingOrderModel>, IIncomingOrderModel>(Message, i => i.ToProto());
        }
        IIncomingOrderModel IList<IIncomingOrderModel>.this[int index] { get => Wrapper[index]; set => Wrapper[index] = value; }
        int IList<IIncomingOrderModel>.IndexOf(IIncomingOrderModel item) => Wrapper.IndexOf(item);
        void IList<IIncomingOrderModel>.Insert(int index, IIncomingOrderModel item) => Wrapper.Insert(index, item);
        void IList<IIncomingOrderModel>.RemoveAt(int index) => Wrapper.RemoveAt(index);
        int ICollection<IIncomingOrderModel>.Count => Wrapper.Count;
        bool ICollection<IIncomingOrderModel>.IsReadOnly => Wrapper.IsReadOnly;
        void ICollection<IIncomingOrderModel>.Add(IIncomingOrderModel item) => Wrapper.Add(item);
        void ICollection<IIncomingOrderModel>.Clear() => Wrapper.Clear();
        bool ICollection<IIncomingOrderModel>.Contains(IIncomingOrderModel item) => Wrapper.Contains(item);
        void ICollection<IIncomingOrderModel>.CopyTo(IIncomingOrderModel[] array, int arrayIndex) => Wrapper.CopyTo(array, arrayIndex);
        IEnumerator<IIncomingOrderModel> IEnumerable<IIncomingOrderModel>.GetEnumerator() => Wrapper.GetEnumerator();
        IEnumerator IEnumerable.GetEnumerator() => Wrapper.GetEnumerator();
        bool ICollection<IIncomingOrderModel>.Remove(IIncomingOrderModel item) => Wrapper.Remove(item);
        public static implicit operator IncomingOrderModelList(RepeatedField<IncomingOrderModel> from)
        {
            var result = new IncomingOrderModelList(from);
            return result;
        }
        public static implicit operator RepeatedField<IncomingOrderModel>(IncomingOrderModelList from)
        {
            return from.Message;
        }
    }
    public sealed partial class IncomingOrderModel : IIncomingOrderModel
    {
        IIncomingOrderReference IIncomingOrderModel.Reference => Reference;
        private IList<Communication.Models.Entities.TableLines.GoodTransactionLines.IncomingOrderLine.IIncomingOrderLineModel> RequestedGoodsListWrapper;
        partial void OnConstruction()
        {
            RequestedGoodsListWrapper = new ListWrapper<IncomingOrderLineModel, RepeatedField<IncomingOrderLineModel>, Communication.Models.Entities.TableLines.GoodTransactionLines.IncomingOrderLine.IIncomingOrderLineModel>(RequestedGoods, ri => ri.ToProto());
        }
        IList<Communication.Models.Entities.TableLines.GoodTransactionLines.IncomingOrderLine.IIncomingOrderLineModel> IIncomingOrderModel.RequestedGoods => RequestedGoodsListWrapper;
    }
}