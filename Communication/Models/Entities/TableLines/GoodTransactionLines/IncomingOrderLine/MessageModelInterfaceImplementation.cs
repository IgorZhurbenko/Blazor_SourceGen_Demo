// Autogenerated. Will be overwritten on build. Remove this comment to cancel overwriting.

using Communication.Models.Entities.TableLines.GoodTransactionLines.IncomingOrderLine;
using System.Linq;
using Communication.Common;
using Google.Protobuf.Collections;
using System.Collections.Generic;
using System.Collections;
using Communication.ProtoModels.Conversion;
namespace Communication.ProtoModels
{
    public sealed partial class IncomingOrderLineModelList : IList<Communication.Models.Entities.TableLines.GoodTransactionLines.IncomingOrderLine.IIncomingOrderLineModel>
    {
        internal ListWrapper<IncomingOrderLineModel, RepeatedField<IncomingOrderLineModel>, IIncomingOrderLineModel> Wrapper { get; private set; }
        public IncomingOrderLineModelList(RepeatedField<IncomingOrderLineModel> itemsParameter)
        {
            this.message_ = itemsParameter;
            OnConstruction();
        }
        partial void OnConstruction()
        {
            Wrapper = new ListWrapper<IncomingOrderLineModel, RepeatedField<IncomingOrderLineModel>, IIncomingOrderLineModel>(Message, i => i.ToProto());
        }
        IIncomingOrderLineModel IList<IIncomingOrderLineModel>.this[int index] { get => Wrapper[index]; set => Wrapper[index] = value; }
        int IList<IIncomingOrderLineModel>.IndexOf(IIncomingOrderLineModel item) => Wrapper.IndexOf(item);
        void IList<IIncomingOrderLineModel>.Insert(int index, IIncomingOrderLineModel item) => Wrapper.Insert(index, item);
        void IList<IIncomingOrderLineModel>.RemoveAt(int index) => Wrapper.RemoveAt(index);
        int ICollection<IIncomingOrderLineModel>.Count => Wrapper.Count;
        bool ICollection<IIncomingOrderLineModel>.IsReadOnly => Wrapper.IsReadOnly;
        void ICollection<IIncomingOrderLineModel>.Add(IIncomingOrderLineModel item) => Wrapper.Add(item);
        void ICollection<IIncomingOrderLineModel>.Clear() => Wrapper.Clear();
        bool ICollection<IIncomingOrderLineModel>.Contains(IIncomingOrderLineModel item) => Wrapper.Contains(item);
        void ICollection<IIncomingOrderLineModel>.CopyTo(IIncomingOrderLineModel[] array, int arrayIndex) => Wrapper.CopyTo(array, arrayIndex);
        IEnumerator<IIncomingOrderLineModel> IEnumerable<IIncomingOrderLineModel>.GetEnumerator() => Wrapper.GetEnumerator();
        IEnumerator IEnumerable.GetEnumerator() => Wrapper.GetEnumerator();
        bool ICollection<IIncomingOrderLineModel>.Remove(IIncomingOrderLineModel item) => Wrapper.Remove(item);
        public static implicit operator IncomingOrderLineModelList(RepeatedField<IncomingOrderLineModel> from)
        {
            var result = new IncomingOrderLineModelList(from);
            return result;
        }
        public static implicit operator RepeatedField<IncomingOrderLineModel>(IncomingOrderLineModelList from)
        {
            return from.Message;
        }
    }
    public sealed partial class IncomingOrderLineModel : IIncomingOrderLineModel
    {
        Communication.Models.Entities.ReferrableEntities.Documents.IncomingOrder.IIncomingOrderReference IIncomingOrderLineModel.IncomingOrder
        {
            set
            {
                IncomingOrder = new IncomingOrderReference{ID = value.ID, Representation = value.Representation, };
            }
            get
            {
                return IncomingOrder;
            }
        }
        Communication.Models.Entities.ReferrableEntities.DataHolders.Good.IGoodReference IIncomingOrderLineModel.Good
        {
            set
            {
                Good = new GoodReference{ID = value.ID, Representation = value.Representation, };
            }
            get
            {
                return Good;
            }
        }
    }
}