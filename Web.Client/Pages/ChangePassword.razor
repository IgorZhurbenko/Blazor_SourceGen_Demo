@layout EmptyLayout
@page "/changepassword/"
@inject NavigationManager navMan;
@using Web.Client.Components.Universal.Inputs;
@using Communication.Exceptions;

@inject Web.Client.Services.ServerCommunication.SessionActionsInvoker sessionInvoker;
@inject Web.Client.Services.UI.GlobalClicksCatcher globalClickCatcher;
@inject Services.ServerCommunication.AccountActionsInvoker accountActionsInvoker;

<div class="card-central card-login">
    <h6 style="text-align:center"> Login here </h6>

    <StringInput InputLabel="Current password" OnValueSet="v => { CurrentPassword = v; ErrorMessage = null; StateHasChanged(); }" Value="@CurrentPassword" />
    <StringInput InputLabel="New password" OnValueSet="v => { NewPassword = v; ErrorMessage = null; StateHasChanged(); }" Value="@NewPassword" />
    <StringInput InputLabel="Repeat new password" OnValueSet="v => { NewPasswordRepeated = v; ErrorMessage = null; StateHasChanged(); }" Value="@NewPasswordRepeated" />

    <button style="margin-left:80%"
            @onclick="async e => await ChangePasswordAsync()" disabled="@(!PasswordsMatch)">
        Change
    </button>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <p style="color:red">
            @ErrorMessage
        </p>
    }

    @if (!string.IsNullOrEmpty(SuccessMessage))
    {
        <p style="color:forestgreen">
            @SuccessMessage
        </p>
    }

</div>

@code {
    private string CurrentPassword { get; set; }
    private string NewPassword { get; set; }
    private string NewPasswordRepeated { get; set; }

    private bool PasswordsMatch => NewPassword == NewPasswordRepeated;

    private string ErrorMessage { get; set; }

    private string SuccessMessage { get; set; }

    private async Task ChangePasswordAsync()
    {
        var request = accountActionsInvoker.ChangePassword.GetResultAsync(CurrentPassword, NewPassword);
        try
        {
            var result = await request;
            if (result)
            {
                ErrorMessage = null;
                SuccessMessage = "Password has been successfully changed. You will now be redirected to login page to enter with your new password.";
                StateHasChanged();
                Account.AnnulAuthorisation();
                await Task.Delay(2000);
                Account.RedirectToLogin("/");
            }
        }
        catch (HandledException ex)
        {
            SuccessMessage = null;
            ErrorMessage = ex.InnerException.Message;
        }
    }
}
