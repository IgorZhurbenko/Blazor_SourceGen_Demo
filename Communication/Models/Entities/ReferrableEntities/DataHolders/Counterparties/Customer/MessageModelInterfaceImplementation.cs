// Autogenerated. Will be overwritten on build. Remove this comment to cancel overwriting.

using Communication.Models.Entities.ReferrableEntities.DataHolders.Counterparties.Customer;
using System.Linq;
using Communication.Common;
using Google.Protobuf.Collections;
using System.Collections.Generic;
using System.Collections;
using Communication.ProtoModels.Conversion;
namespace Communication.ProtoModels
{
    public sealed partial class CustomerModelList : IList<Communication.Models.Entities.ReferrableEntities.DataHolders.Counterparties.Customer.ICustomerModel>
    {
        internal ListWrapper<CustomerModel, RepeatedField<CustomerModel>, ICustomerModel> Wrapper { get; private set; }
        public CustomerModelList(RepeatedField<CustomerModel> itemsParameter)
        {
            this.message_ = itemsParameter;
            OnConstruction();
        }
        partial void OnConstruction()
        {
            Wrapper = new ListWrapper<CustomerModel, RepeatedField<CustomerModel>, ICustomerModel>(Message, i => i.ToProto());
        }
        ICustomerModel IList<ICustomerModel>.this[int index] { get => Wrapper[index]; set => Wrapper[index] = value; }
        int IList<ICustomerModel>.IndexOf(ICustomerModel item) => Wrapper.IndexOf(item);
        void IList<ICustomerModel>.Insert(int index, ICustomerModel item) => Wrapper.Insert(index, item);
        void IList<ICustomerModel>.RemoveAt(int index) => Wrapper.RemoveAt(index);
        int ICollection<ICustomerModel>.Count => Wrapper.Count;
        bool ICollection<ICustomerModel>.IsReadOnly => Wrapper.IsReadOnly;
        void ICollection<ICustomerModel>.Add(ICustomerModel item) => Wrapper.Add(item);
        void ICollection<ICustomerModel>.Clear() => Wrapper.Clear();
        bool ICollection<ICustomerModel>.Contains(ICustomerModel item) => Wrapper.Contains(item);
        void ICollection<ICustomerModel>.CopyTo(ICustomerModel[] array, int arrayIndex) => Wrapper.CopyTo(array, arrayIndex);
        IEnumerator<ICustomerModel> IEnumerable<ICustomerModel>.GetEnumerator() => Wrapper.GetEnumerator();
        IEnumerator IEnumerable.GetEnumerator() => Wrapper.GetEnumerator();
        bool ICollection<ICustomerModel>.Remove(ICustomerModel item) => Wrapper.Remove(item);
        public static implicit operator CustomerModelList(RepeatedField<CustomerModel> from)
        {
            var result = new CustomerModelList(from);
            return result;
        }
        public static implicit operator RepeatedField<CustomerModel>(CustomerModelList from)
        {
            return from.Message;
        }
    }
    public sealed partial class CustomerModel : ICustomerModel
    {
        ICustomerReference ICustomerModel.Reference => Reference;
    }
}