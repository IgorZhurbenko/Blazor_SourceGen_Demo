// Autogenerated. Will be overwritten on build. Remove this comment to cancel overwriting.

using Communication.Models.Filters.CustomerModelFilter;
using System.Linq;
using Communication.Common;
using Google.Protobuf.Collections;
using System.Collections.Generic;
using System.Collections;
using Communication.ProtoModels.Conversion;
namespace Communication.ProtoModels
{
    public sealed partial class CustomerModelFilterModelList : IList<Communication.Models.Filters.CustomerModelFilter.ICustomerModelFilterModel>
    {
        internal ListWrapper<CustomerModelFilterModel, RepeatedField<CustomerModelFilterModel>, ICustomerModelFilterModel> Wrapper { get; private set; }
        public CustomerModelFilterModelList(RepeatedField<CustomerModelFilterModel> itemsParameter)
        {
            this.message_ = itemsParameter;
            OnConstruction();
        }
        partial void OnConstruction()
        {
            Wrapper = new ListWrapper<CustomerModelFilterModel, RepeatedField<CustomerModelFilterModel>, ICustomerModelFilterModel>(Message, i => i.ToProto());
        }
        ICustomerModelFilterModel IList<ICustomerModelFilterModel>.this[int index] { get => Wrapper[index]; set => Wrapper[index] = value; }
        int IList<ICustomerModelFilterModel>.IndexOf(ICustomerModelFilterModel item) => Wrapper.IndexOf(item);
        void IList<ICustomerModelFilterModel>.Insert(int index, ICustomerModelFilterModel item) => Wrapper.Insert(index, item);
        void IList<ICustomerModelFilterModel>.RemoveAt(int index) => Wrapper.RemoveAt(index);
        int ICollection<ICustomerModelFilterModel>.Count => Wrapper.Count;
        bool ICollection<ICustomerModelFilterModel>.IsReadOnly => Wrapper.IsReadOnly;
        void ICollection<ICustomerModelFilterModel>.Add(ICustomerModelFilterModel item) => Wrapper.Add(item);
        void ICollection<ICustomerModelFilterModel>.Clear() => Wrapper.Clear();
        bool ICollection<ICustomerModelFilterModel>.Contains(ICustomerModelFilterModel item) => Wrapper.Contains(item);
        void ICollection<ICustomerModelFilterModel>.CopyTo(ICustomerModelFilterModel[] array, int arrayIndex) => Wrapper.CopyTo(array, arrayIndex);
        IEnumerator<ICustomerModelFilterModel> IEnumerable<ICustomerModelFilterModel>.GetEnumerator() => Wrapper.GetEnumerator();
        IEnumerator IEnumerable.GetEnumerator() => Wrapper.GetEnumerator();
        bool ICollection<ICustomerModelFilterModel>.Remove(ICustomerModelFilterModel item) => Wrapper.Remove(item);
        public static implicit operator CustomerModelFilterModelList(RepeatedField<CustomerModelFilterModel> from)
        {
            var result = new CustomerModelFilterModelList(from);
            return result;
        }
        public static implicit operator RepeatedField<CustomerModelFilterModel>(CustomerModelFilterModelList from)
        {
            return from.Message;
        }
    }
    public sealed partial class CustomerModelFilterModel : ICustomerModelFilterModel
    {
        Communication.Models.Filters.StringFilter.IStringFilterModel ICustomerModelFilterModel.Name
        {
            set
            {
                Name = value.ToProto();
            }
            get
            {
                return Name;
            }
        }
        Communication.Models.Filters.ReferenceFilter.IReferenceFilterModel ICustomerModelFilterModel.Reference
        {
            set
            {
                Reference = value.ToProto();
            }
            get
            {
                return Reference;
            }
        }
    }
}